<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project SYSTEM "Configuration.dtd"> 

<!-- Test to verify the correct identification of dependencies if meta annotations are present in the code.
The involved package is metaAnnotations.

Expected Results:

1 dependency from MotorVehicle to Motorbike via annotation InheritanceTest.
1 dependency from MotorVehicle to annotation IntheritanceTest.
1 dependency from MotorVehicle to Engine.

1 dependency from Car to Motorbike via annotation InheritanceTest because the annotation InheritanceTest is inherited from the class MotorVehicle.
Since the annotation InheritanceTest has the argument Motorbike.class, there is no dependency created for Motorbike by this annotation.
1 dependency from Car to MotorVehicle because of inheritance.

1 dependency from Motorbike to MotorVehicle because of inheritance.
1 dependency from Motorbike to annotation DrivingPleasure.

1 dependency from Trike to Car via annotation InheritanceTest. The annotation declaration in Trike overrides the declaration in its superclass MotorVehicle.
1 dependency from Trike to annotation InheritanceTest.
1 dependency from Trike to MotorVehicle because of inheritance.


(Perhaps: 1 dependency respectively from Car, Motorbike to annotation InheritanceTest.
1 dependency respectively from Car, Trike, Motorbike to Engine.)


There are also some additional tests in this package: 
The class Car uses the annotations Override and Deprecated of the java.lang-package.
This should not create dependencies from Car to Override or Deprecated of the metaAnnotations-package.

The annotation type Fast uses the meta annotations Documented and Target. 
This should not create dependencies from Fast to Documented or Target of the metaAnnotations-package.

The classes Motorbike and Trike use the annotation Joy with the argument Car.class. Since the retention policy of the annotation type Joy is set to source, 
all usages of Joy are only visible in the sourcecode. To ensure a constant behaviour of the Dependometer regarding the input (source and class 
files or simply class files) all dependencies that are not reflected in the bytecode should be ignored. So there shouldn't be dependencies from
Motorbike and Trike respectively to Joy.

-->

<!-- 
	name 
		the project name appears in the reports
	numberOfCyclesFeedbackOnConsole (default = "1")
		Every time the configured number of cycles is reached you get an extra warning in your shell
	numberOfCycleAnalysisProgressFeedbackOnConsole (default = "1")
		Every time the remaining number of nodes was accordingly reduced you get an extra info in your shell
	checkLayerDependencies (default = "true")
	checkSubsystemDependencies (default = "true")
		"true"	all dependencies are checked against the allowed dependencies (depends-upon node)
		"false" no dependency check
	checkPackageDependencies (default = "true")
		"true" 	all package dependencies are checked against the allowed dependencies (only packages are checked that have a package description)
		"false" no dependency check
	cumulateLayerDependencies (default = "true")
	cumulateSubsystemDependencies (default = "true")
	cumulatePackageDependencies (default = "true")
	cumulateCompilationUnitDependencies (default = "true")
	cumulateTypeDependencies (default = "true")
		"true"	cumulate dependencies
		"false" no cumulation
	maxLayerCycles (default = "0")            		
	maxSubsystemCycles (default = "0")      		
	maxPackageCycles (default = "0")          		
	maxCompilationUnitCycles (default = "0")  		
	maxTypeCycles (default = "0")             		
		Configure the cycle analysis behavior to avoid an endlessly running process. As an alternativ you can start the
		dependometer with the command 'java -jar dependomter.jar -file <your configuration>' and terminate the analyis when
		ever you want with 'ctrl-c' in the shell. This is possible past the point where in the shell the message 'Terminate
		running analysis with 'ctrl-c'!' appears. Past this point you have also a valid html output. Only the cycle analyis
		output gets updated. With a corresponding refresh in your browser you can see the updated information.   
		"-2" 	no analysis
		"-1" 	cycle existence check
		"0"	like "-1" plus detailed cycle participation (which elements participate in cycles?) and levelization
		">0"	like 0" but with the provided upper limit for detected cycles (stops if 'n' cycles are reached)
-->
<project 
	name											= "Test: Combination of all tests without architecture definition" 
	numberOfCyclesFeedbackOnConsole 				= "1"
	numberOfCycleAnalysisProgressFeedbackOnConsole 	= "1"
	checkLayerDependencies							= "false"
	checkSubsystemDependencies 						= "false"
	checkPackageDependencies 						= "false"
	cumulateLayerDependencies 						= "false"
	cumulateSubsystemDependencies 					= "false"
	cumulatePackageDependencies 					= "true"
	cumulateCompilationUnitDependencies 			= "true"
	cumulateTypeDependencies 						= "true"
	maxLayerCycles             						= "0"
	maxSubsystemCycles         						= "0"
	maxPackageCycles           						= "0"
	maxCompilationUnitCycles   						= "0"
	maxTypeCycles              						= "0"
>
    <!-- DIRECTORIES -->
    <input dir="."/>

    <!-- INPUT PACKAGE FILTER -->
    <include-package name=".*"/>

    <!-- OUTPUT LISTENER -->
    <listener class="com.valtech.source.dependometer.ui.console.output.HtmlWriter" args="./results"/>
    <listener class="com.valtech.source.dependometer.ui.console.output.CsvWriter" args="./results/summary.csv"/>
    <listener class="com.valtech.source.dependometer.ui.console.output.DetailedCsvWriter" args="./results/summary-detailed.csv"/>
    <!-- configure the detail level via an additional argument: layer, subsystem, package, compilation-unit, type (default = compilation-unit) -->
    <listener class="com.valtech.source.dependometer.ui.console.output.ViolationReportCsvWriter" args="./results/violation-report.csv type"/>
    <!-- configure the detail level via an additional argument: layer, subsystem, package, compilation-unit, type (default = package) -->
    <listener class="com.valtech.source.dependometer.ui.console.output.CycleParticipationReportCsvWriter" args="./results/cycle-participation-report.csv type"/>
    <listener class="com.valtech.source.dependometer.ui.console.output.TypeDependencyCsvWriter" args="./results/typedependencies.csv"/>

	<!-- ASSERTIONS -->
	<assertion pattern="assert"/>
	
	<!-- SKIP -->
	<skip prefix="java\..*"/>

</project>