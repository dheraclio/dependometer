<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE project SYSTEM "Configuration.dtd">

	<!--
		Test to verify the correct identification of dependencies. All
		"architecture.*"-packages are involved. ============== Expected
		Results: ============== ======= Dependencies per compilation unit:
		======= 1 dependency from Utility to Motorbike via static import 1
		dependency from Utility to annotation DocumentStyle 1 dependency from
		Utility to Brand via annotation DocumentStyle 1 dependency from
		Utility to DB 1 dependency from Brand to Car via generic in an enum
		(=Brand) 1 dependency from Brand to Motorbike via generic in an enum 1
		dependency from Fuel to Engine via generic in an enum (=Fuel) 1
		dependency from Car to Utility 1 dependency from annotation
		DocumentStyle to Brand 1 dependency from Motorbike to Utility 1
		dependency from Motorbike to annotation Motorbike.Call 1 dependency
		from Motorbike to Hospital via annotation Motorbike.Call 1 dependency
		from MotorVehicle to Engine 1 dependency from MotorVehicle to Brand 1
		dependency from Engine to Fuel ======= Cycles in this testcase:
		======= 1 dependency from Utility to Motorbike via static import 1
		dependency from Motorbike to Utility => Cycle 1 dependency from
		Utility to annotation DocumentStyle 1 dependency from annotation
		DocumentStyle to Brand 1 dependency from Brand to Car via generic in
		an enum (=Brand) 1 dependency from Car to Utility => Cycle 1
		dependency from Brand to Car via generic in an enum (=Brand) 1
		dependency from Brand to Motorbike via generic in an enum 1 dependency
		from MotorVehicle to Brand. Since Car and Motorbike are subclasses of
		MotorVehicle, this creates two cycles. => 2 Cycles 1 dependency from
		Fuel to Engine via generic in an enum (=Fuel) 1 dependency from Engine
		to Fuel => Cycle 1 dependency from Hospital to Motorbike 1 dependency
		from Motorbike to Hospital via annotation Motorbike.Call => Cycle
	-->

	<!--
		name the project name appears in the reports
		numberOfCyclesFeedbackOnConsole (default = "1") Every time the
		configured number of cycles is reached you get an extra warning in
		your shell numberOfCycleAnalysisProgressFeedbackOnConsole (default =
		"1") Every time the remaining number of nodes was accordingly reduced
		you get an extra info in your shell checkLayerDependencies (default =
		"true") checkSubsystemDependencies (default = "true") "true" all
		dependencies are checked against the allowed dependencies
		(depends-upon node) "false" no dependency check
		checkPackageDependencies (default = "true") "true" all package
		dependencies are checked against the allowed dependencies (only
		packages are checked that have a package description) "false" no
		dependency check cumulateLayerDependencies (default = "true")
		cumulateSubsystemDependencies (default = "true")
		cumulatePackageDependencies (default = "true")
		cumulateCompilationUnitDependencies (default = "true")
		cumulateTypeDependencies (default = "true") "true" cumulate
		dependencies "false" no cumulation maxLayerCycles (default = "0")
		maxSubsystemCycles (default = "0") maxPackageCycles (default = "0")
		maxCompilationUnitCycles (default = "0") maxTypeCycles (default = "0")
		Configure the cycle analysis behavior to avoid an endlessly running
		process. As an alternativ you can start the dependometer with the
		command 'java -jar dependomter.jar -file <your configuration>' and
		terminate the analyis when ever you want with 'ctrl-c' in the shell.
		This is possible past the point where in the shell the message
		'Terminate running analysis with 'ctrl-c'!' appears. Past this point
		you have also a valid html output. Only the cycle analyis output gets
		updated. With a corresponding refresh in your browser you can see the
		updated information. "-2" no analysis "-1" cycle existence check "0"
		like "-1" plus detailed cycle participation (which elements
		participate in cycles?) and levelization ">0" like 0" but with the
		provided upper limit for detected cycles (stops if 'n' cycles are
		reached)
	-->
<project name="Test with architecture definition"
	numberOfCyclesFeedbackOnConsole="1"
	numberOfCycleAnalysisProgressFeedbackOnConsole="1"
	checkLayerDependencies="true" checkSubsystemDependencies="true"
	checkPackageDependencies="true" cumulateLayerDependencies="true"
	cumulateSubsystemDependencies="true" cumulatePackageDependencies="true"
	cumulateCompilationUnitDependencies="true" cumulateTypeDependencies="true"
	maxLayerCycles="50" maxSubsystemCycles="50" maxPackageCycles="50"
	maxCompilationUnitCycles="7" maxTypeCycles="50">
	<!-- DIRECTORIES -->
	<input dir="." />

	<!-- INPUT PACKAGE FILTER -->
	<include-package name=".*" />

	<!-- OUTPUT LISTENER -->
	<listener
		class="com.valtech.source.dependometer.ui.console.output.HtmlWriter"
		args="./results" />
	<listener class="com.valtech.source.dependometer.ui.console.output.CsvWriter"
		args="./results/summary.csv" />
	<listener
		class="com.valtech.source.dependometer.ui.console.output.DetailedCsvWriter"
		args="./results/summary-detailed.csv" />
	<!--
		configure the detail level via an additional argument: layer,
		subsystem, package, compilation-unit, type (default =
		compilation-unit)
	-->
	<listener
		class="com.valtech.source.dependometer.ui.console.output.ViolationReportCsvWriter"
		args="./results/violation-report.csv type" />
	<!--
		configure the detail level via an additional argument: layer,
		subsystem, package, compilation-unit, type (default = package)
	-->
	<listener
		class="com.valtech.source.dependometer.ui.console.output.CycleParticipationReportCsvWriter"
		args="./results/cycle-participation-report.csv type" />
	<listener
		class="com.valtech.source.dependometer.ui.console.output.TypeDependencyCsvWriter"
		args="./results/typedependencies.csv" />


	<!-- ASSERTIONS -->
	<assertion pattern="assert" />

	<!-- SKIP -->
	<skip prefix="java\..*" />

	<!-- THRESHOLDS -->
	<lower-threshold name="Project.PercentageOfPackagesWithRcNotLessThanOne"
		value="70" />
	<!--
		70 percent of the packages may have an relational cohesion not less
		than 1.0
	-->
	<lower-threshold
		name="Project.AverageNumberOfAssertionsPerProjectInternalClass" value="1" />
	<!--
		Checks the average existance of assertion statements per project
		internal class
	-->
	<upper-threshold name="Project.ACD" value="20" />
	<!-- Checks the Average component dependency -->
	<upper-threshold name="Project.PackageCyclesExist"
		value="0" />
	<!-- Checks if cycles are present -->
	<upper-threshold name="Project.CompilationUnitCyclesExist"
		value="0" />
	<!-- Checks if cycles are present -->
	<upper-threshold name="Project.TypeCyclesExist" value="0" />
	<!-- Checks if cycles are present -->
	<upper-threshold name="Project.MaxDepthOfInheritance"
		value="6" />
	<!-- Checks the depth of inheritance excluding java.lang.Object -->

	<!-- LOGICAL ARCHITECTURE -->
	<layer name="application">
		<description>Application</description>
		<subsystem name="vehicle">
			<!--
				This name has been chosen to enable vertical-slice analysis
				(Vertical-slices are identified according to the name of the
				subsystems).
			-->
			<description>Provides some auxilliary methods</description>
			<include-package name="architecture.application.*" />
			<!--
				Packages implementing the subsystem - regular expressions JDK 1.4
			-->
			<!--
				Allowed subsystem dependency. Fully qualified name necessary.
			-->
			<depends-upon name="model::vehicle" />
			<depends-upon name="model::company" />
			<depends-upon name="model::other" />
		</subsystem>
		<!--
			Allowed layer dependency
		-->
		<depends-upon name="model" />
		<depends-upon name="external" />
	</layer>

	<layer name="model">
		<description>Some objects</description>
		<subsystem name="vehicle">
			<description>
				Vehicle model
			</description>
			<include-package name="architecture.objects.vehicle.*" />
			<include-package name="architecture.objects.vehicleParts.*" />
			<depends-upon name="persistence::vehicle" />
		</subsystem>

		<subsystem name="company">
			<description>
				Company
			</description>
			<include-package name="architecture.objects.company.*" />
			<depends-upon name="external::logging" />
			<depends-upon name="persistence::vehicle" />
		</subsystem>

		<subsystem name="other">
			<description>Other</description>
			<include-package name="architecture.objects.other.*" />
			<depends-upon name="external::logging" />
			<depends-upon name="persistence::vehicle" />
		</subsystem>

		<depends-upon name="persistence" />
		<depends-upon name="external" />
		<!--
			Allowed layer dependency
		-->
	</layer>

	<layer name="persistence">
		<description>Persistence</description>
		<subsystem name="vehicle">
			<!--
				This name has been chosen to enable vertical-slice analysis
				(Vertical-slices are identified according to the name of the
				subsystems).
			-->
			<description>DB</description>
			<include-package name="architecture.persistence.*" />
			<depends-upon name="external::logging" />
		</subsystem>

		<depends-upon name="external" />
	</layer>

	<layer name="external">
		<!--
			External is not a keyword. To be considered as internal by the
			dependometer, packages have to be included in the directories
			definition and in the input package filter.
		-->
		<description>APIs that do not belong to the project</description>
		<subsystem name="logging">
			<include-package name="org.apache.log4j.*" />
		</subsystem>
	</layer>

</project>
