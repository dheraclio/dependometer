/*
 * Copyright 2009 Valtech GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */


What is Dependometer
--------------------

Dependometer is a java based analysis tool for java projects.

The main features are:

    - Use a logical architecture description in terms of layers and subsystems
      and their physical mapping (n Packages implement a Subsystem) and check
      logical architecture violations.
    - Analyze the (physical) dependency architecture between layers, subsystems,
      resulting vertical-slices, packages, compilation-units (java files) and 
      types (classes and interfaces)
    - Analyze cycles between elements
    - Calculate a bunch of metrics for all elements - this includes metrics from 
      John Lakos, Robert C. Martin and Craig Larman.
    - Define thresholds and receive feedback upon their violation
    - Simulate via simple refactoring definitions and cutting unwanted dependencies
      changes to the physical structure possibly enhancing refactoring.
    - Create a complete HTML presentation via xslt. This provides browsing 
      capabilities from layer (logical element) to compilation-unit (physical element)
      for a discussion which physical elements cause the logical architecture to
      break. 

See http://source.valtech.com/display/dpm/Documentation for further information 
on configuration, provided architecture elements and the calculated metrics


Installing and Using the Dependometer
-------------------------------------



Prerequisites

Before you start make sure that you have the following prerequisites installed on your computer:
- Java (JDK) 5 or higher

Install & Run Dependometer
- Unpack the [distributable|https://source.valtech.com/display/dpm/Downloads] to a directory of your choice ({{<INSTALL_DIR>}})

- Run {code} java -jar dependometer-<programming_language>-<version>.jar{code} in {{<INSTALL_DIR>/lib}}
Hint: The message "missing mandatory option -file" shows that the installation is correct.

- Copy and rename config/dependometer-template.xml as you like (e.g. your-project/dep.xml)

- Configure path settings (sources and results) in your local dep.xml

- Run Dependometer again, appending the "-file <your config file>" option

- If no errors occur, open index.html from your result directory

- Define your logical architecture (refer to the README for further instructions)


Using the Dependometer in your project 
--------------------------------------

- Copy the dependometer-template.xml configuration file from the dependometer installation 
  config directory to your project root directory, rename it to dep.xml and change 
  settings like project name, input directories, ...  according to your needs.
  See the 'Getting started' section for more details on how to start with your
  own configuration. See the dependometer-selftest.xml of the dependometer self test for full 
  configuration features.

- Start the dependometer directly invoking the java virtual machine with
  the '-jar' flag.
  Use the following command to start the dependometer for a given configuration file:
  java -jar [dependometer directory]/lib/dependometer-java-<version>.jar -file [your configuration file].
  Depending on the size of your project you may have to specify more heap size.
  HINT: Using the server VM (java -server ...) for the dependometer invocation improves analysis speed.

- Open results/index.html from your project with a standard browser, explore
  the analyzed information and the links between the elements to see what can
  do the dependometer for your project


Project internal and external elements
--------------------------------------

A layer has at least one subsystem and no directly associated packages. If a layer is
considered 'project internal' or 'project external' depends solely upon its subsystems.
If it has at least one 'project internal' subsystem it gets marked 'project internal' 
as well. If there are only associated 'project external' subsystems the layer gets marked
'project external'.
  
As 'project internal' subsystems are considered all that have at least one associated 
'project internal' package. If a subsystem does do not have an implementation (i.e. no 
associated packages) the package filter of the subsystem is compared to the project
package filter. If the subsystem package filter is included by the project package filter
it gets marked 'project internal'. The implementation to answer the question if a
package filter includes the other is rather simple and incomplete - it is a TODO to 
replace this short term solution in the future. 

Packages, compilation units or types are also considered 'project internal' if they were
matched by the project filter. Obviously these are the elements that could be analyzed by
the dependometer parsing java class and source files because they were found by a 
matching project filter.

INFO: 'project external' elements do not alter the metrics of 'project internal' elements.


Known limitations
-----------------

- Not all dependencies between types are recognized. The javac compiler "inlines"
  some references to variable declarations (e.g. public static final fields, 
  <TypeName>.class.getName()). For this reason, if a class file is parsed the 
  "dependometer" tries to locate and parse the corresponding source file to 
  extract the usage of such "inlineable" fields. But there are situations in
  which dependencies due to the usage of "inlineable" fields are not recognized:
  
  1. Parsing of correspondig source files is not possible.
  2. The correspondig source files are parsed but a static final String field from an
     also parsed type (with or without a corresponding parsed source file) is accessed 
     via an object reference like "ref.MAX" and not via the statement "<TypeName>.MAX".
  3. Dependencies from parsed types with corresponding parsed source files to 
     "inlineable" fields from not parsed types. This happens for example if an 
     "inlineable" field is accessed from within the project in types that do not
     belong to the project (i.e. types without parsed class file). If it is crucial
     to have that kind of information, then you should include the external libraries
     via an adequate 'input' node where to find these libraries. 
  4. For inner classes the corresponding source file is not analyzed (a TODO for the
     future).

- The dependometer does not do any syntax checking while parsing corresponding source
  files. It relies on a consistent build where the resulting class files and their
  corresponding source files are provided.

- As mentioned earlier the short term implementation for answering the question if a 
  package filter includes another is not a complete solution. There are definitly 
  situations (regular expression constructs) that lead to an inadequate answer.
  In general this is not a severe problem. If a subsystem has only one associated 
  'project internal' or 'project external' package the implementation is not used, 
  because there is no doubt left that has to be resolved via the package filter based
  comparison.
  
- In the case of inner compilation unit dependencies (i.e. types using types in a 
  single java source file) a dependency from the outer type to its inner types
  is added by default. This information is not extracted via dependency analysis.
  If a type contains a (inner) type than it a strong coupling exists - this is
  expressed by adding the dependency.
  
- The list of missing source files may contain types that are included within
  source files containing multiple classes in parallel. This happens when a
  compiler is used, that does not write the compilation unit name to the class
  file.
  
- Annotation types marked with meta-annotation @Retention(RetentionPolicy.SOURCE) are
  not represented in java bytecode, but might be recognized, if an according java source 
  file is available, since the java source file parser is currently not able to filter
  those annotations especially regarding externally defined annotations for which the
  retention policy is not known. This might result in different 'depends upon' values
  depending on whether java source files are analysed or not! 
  
- Since the 'dependometer' parses corresponding source files for 'inlineable' fields 
  detection just looking for '.class' access, dependencies to annotations are not correctly
  recognized. 
  E.g. 
  		@Joy(Car.class) public class Test {...}
  will return a dependency between Test and Car but not between Test and Joy as long as
  Joy is not imported from another package.
  
  
Getting started
---------------

If you have already gone through the sections 'Installing and Using the Dependometer'
and 'Using the Dependometer in your project' here are some useful comments and hints
on how to configure the dependometer for your project. The provided configuration
'project_dep.xml' is the result going through the following steps (or something very 
similar).

1. Configure name, dependency checks, dependency cumulation and cycle analysis behavior

- Provide a name for your project - it appears in the reports.
- Configure the dependency check behavior - use "false" for layers, subsystems and packages.
  Initially you possibly don't have a logical architecture with dependency restrictions.
- Configure the dependency cumulation behavior - try first a full cumulation ("true" for all 
  elements).
- Configure the cycle analysis behavior - try first a full analysis ("0" for all elements).
 
See the 'project' node attributes.

2. Configure the input directories

- Provide the directories for the analysis. At least you have to provide one input directory
  with plain class files or jar/zip archives. The class files are the major information 
  providers for the dependencies. Due to the fact that javac inlines constructs like 
  'public final static String PROJECT_NAME="dependometer";' it is possible to provide also
  the corresponding source files. This can be done with an additional input node where the 
  dependometer can find the corresponding source files - if the source files are stored in
  a diferent root directory. The dependometer then looks for references to inlinable fields. 
  This may result in a more accurate dependency information when inlinable fields are used.

See the 'input' node.

HINT: If you use plain class files, the input directory has to point to the root directory
where the package structure starts.
HINT: If you want to include your Java Server Pages - compile them and use these class files 
for the analysis to.

3. Set the package filter(s)

- Which source files do you wish to analyze under the provided root directories?
  Everything starting with com.* and/or de.*?

See the 'include-package' nodes.

4. Set the compilation unit exclusion filter(s)

- Which compilation units do you wish to exclude under the provided root directories?
  Compilation units containing 'Test' as part of their name?

See the 'exclude-compilation-unit' nodes.

5. Do not change the predefined listener

- You need at least the html writer to get the browsable html output
 
See the 'listener' nodes.
 
6. Define your assertion pattern (if in use)

- Are you using assertions or equivalent constructs?
  Maybe you use the assert statement from the JDK1.4 or your own static API with something 
  like 'AssertApi.precondition'?
  
See the 'assertion' node.

7. Skip dependencies to external elements

- Skip the dependencies to elements external to your project if you don't want to see these
  dependencies. For example skip the dependencies to types from subpackages of 'java' with
  'java\..*' from 'javax' with 'javax\..*' from 'org' with 'org\..*'. 
  If you are interested in which parts of the architecture use which external libraries you 
  can even define a layer and the corresponding subsystems to restrict the usage to defined
  logical 'project external' elements. See the dep.xml of the dependometer itself as an example.

See the 'skip' nodes.

8. Define thresholds

- It is possible to define thresholds. Upon their violation you receive an extra notification
  in the shell.
- The thresholds can be recorded with the CsvWriter or DetailedCsvWriter providing the collected
  information in a single csv file.  

See the 'upper-threshold' and 'lower-threshold' nodes. Configure the CsvWriter or DetailedCsvWriter
with the 'listener' node.

HINT: For a list of possible thresholds use 'ant query-id-list'

9. Run the analysis and check configuration problems

- Run the analysis as desribed in section "Using the Dependometer in your project". 
  If there are no fatal configuration errors the analysis process starts.
- If the cumulation of dependencies takes to long due to excessive dependencies or an excessive 
  number of elements disable the cumulation for types (cumulateTypeDependencies = "false") or if
  necessary also for compilation units, packages ... .
- In the shell where you have started the analysis there may appear warnings on detected 
  cycles. If the analysis process takes to long due to excessive dependencies, an excessive 
  number of elements or an excessive number of cycles you may adjust the cycle analysis behavior. 
  Use the already reached number of cycles for the correspondig element (package, 
  compilation unit, type) as the maximum number setting or skip totally the analysis 
  (see the dep.xml configuration file of the dependometer itself for details). 
  As an alternative you may use the 'ctrl-c' feature as described above.
  Following these instructions you should be able to create a configuration that produces
  a valid output that you can parse starting with 'result/index.html'.
- You may also verify your filter settings.
- Run the analysis with adjusted settings.
- Explore the dependency information and cycle analysis results - nearly everything is linked.

10. Define a logical architecture
 
- Define the layers and subsytems of your project with their allowed dependencies, describe
  the mapping to the (physical) packages and activate the dependency checks (see the dep.xml 
  configuration file of the dependometer itself for details).

HINT: In general logical layers divide a project horizontally, typical layers are 'model', 
      'view', 'controller', 'facade', 'domain', 'persistence', 'technical services' and so on. 
      Subsystems are the result of vertically dividing such layers. A vertical division not 
      necessarily divides every layer (see the dep.xml configuration file of the dependometer 
      itself as an example). If you have turned on the vertical-slices analysis you get extra 
      analysis information based on the vertical divisions.
      See 'Applying UML And Patterns, Craig Larman, Prentice Hall 2002' for a detailed 
      discussion on logical architecture.

- Turn on the dependency checks for layers and subsystems.
- Optionally you may turn on the analysis for the vertical divisions (i.e. vertical-slices).
- Use more threshold definitions - use ant query-id-list for a list of available query ids.
- Run the analysis with the logical architecture settings.
- Check if all Packages were assigned 'packages -> not assigned packages' - adjust if necessary.
- Check if all Subsystems are implemented 'subsystems -> not implemented' - adjust if necessary.
- Explore the logical architecture violations

  See 'project -> metrics -> total number of forbidden efferent package dependencies' for the total 
  number of forbidden efferent (outgoing) package dependencies.

  Or see on every element level (vertical-slice, layer, subsystem, package, compilation-unit, type) 
  via 'violations' detailed information. 
  Navigate to the corresponding elements. The dependencies that violate the logical architecture 
  appear with a different background color.
  Check also unused defined dependencies via 'unused defined dependencies' in the sections for
  layers, subsystems and packages.
  
HINT: The numbers that appear in angle brackets like [12] report the number of type relations in a
dependency. This makes it possible to get a first hint on how strong the coupling between elements is.

The line <layer> [114] application => application-general means the following:
The layer 'application' uses the layer 'application-general' via 114 type relations - which means a
strong coupling. 

A type relation is a compile (physical) dependency from Type A to (uses/implements/extends)
Type B where n references in Type A to Type B count as one.  


Levelization
------------

The levelization does not directly depend upon the number of outgoing dependencies.

John Lakos defines the term 'level' the following way:

level  0 =  project external elements
level  1 =  project internal elements without dependencies to project internal elements
level  n =  project internal elements with dependencies to project internal elements on level n-1

... or:

"The level of a component is the length of the longest path from that component through the (local) 
component dependency graph to the (possibly empty) set of external or compiler-supplied library 
components." (John Lakos)

Due to the fact that a cyclic graph can not be assigned level numbers, the dependometer does the following:

It excludes all elements that participate directly in cycles and cuts the dependencies from other elements
(not directly participating in cycles). With this resulting set of elements the levelization gets calculated. 
This behavior was choosen to provide a first notion of how the levelization looks like while trying to resolve
cyclic constructs. 

The alternative would have been to provide the levelization calculation only if all elements of a given scope 
form a directed acyclic graph.

HINT:

The levelization info provides the perfect order for testing and integration tasks. If the elements (all!) form a 
directed acyclic graph the level numbers suggest the order. Begin testing and/or integration on level 1 upwards.


Average component dependency
----------------------------

For the compilation unit elements not only the type relations are reported (in angle brackets) but also the 
component dependency (depends upon) for a given efferent (outgoing) dependency (in round brackets)
to another compilation unit. If you are looking for compilation units with a very high component
dependency now you may follow the dependency path based on the highest values tracking down the source of a
very high ACD. 


Vertical-Slices
---------------

The division of a project with layers is normally driven by technical aspects and the assignment of general 
responsibility contracts (e.g. model, view, controller, facade, domain, persistence, ...). The vertical division has
a very high potential to reflect domain driven separation of business and application logic aspects (e.g. customer,
products, finance, ... ). To visualize the overall structure of such important vertical-slices it is possible to
turn on the extra analysis concerned with these vertical divisions.

Subsystems are considered part of the same vertical slice if their names are equal. 
For example the subsystems 'facade::customer', 'domain::customer' and 'persistence::customer' are part of a vertical 
slice with name 'customer'.

CAUTION: If 'checkSubsystemDependencies' is set to false no dependencies are checked for the vertical-slices,
because the vertical-slice dependencies are only the cumulated view of the subsystem dependencies.

HINT: Some times it is usefull to exclude technical driven divisions (or others) from the analysis. It is possible
to exclude certain subsystems based on regular expressions.

HINT: Only project-internal subsystems are considered in the vertical-slice analysis. 

See the dep.xml of the dependometer on how to activate the extra analysis and corresponding options.


Metrics and concepts are taken from
-----------------------------------

Principles and Patterns, Robert C. Martin, 2000 
Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996
Applying UML And Patterns, Craig Larman, Prentice Hall 2002


Comments, bugreports, suggestions
---------------------------------

Any feedback is welcome...
<mailto:carsten.kaiser@valtech.de> 