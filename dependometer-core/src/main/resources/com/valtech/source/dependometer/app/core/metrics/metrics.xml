<?xml version="1.0" encoding="ISO-8859-1"?>

<metrics>
	<!-- John Lakos-->
	<metric name="depends upon" value-type="number" index-type="descending">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996' as 'component dependency'.

			Specifies the number of components (equivalent to 'compilation unit') from
			which the component
			under discussion directly and indirectly (transitively) depends upon (including self).

			The idea was extended in such a way that the component under discussion may be any element
			(layer, subsystem, vertical slice, package, compilation unit, type) with dependencies.

			Example: A value of 20 means that the element under discussion depends directly and indirectly upon
			19 other
			elements (+1 for itself).

			IMPORTANT: Only project internal dependencies are considered.
		</description>
	</metric>
	<metric name="number of components" value-type="number" index-type="descending">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			The number of components (SIZE) is equivalent to the 'number of project internal compilation units'.
		</description>
		<related-metric name="number of project internal compilation units" />
	</metric>
	<metric name="average component dependency (ACD)" value-type="number" index-type="descending">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			Expresses the average component (equivalent to 'compilation unit') coupling.
			It is the sum of all
			component depedencies divided by the number of components (SIZE).

			An ACD of 20 means:
			On an average a component depends directly and indirectly (transitively) upon 19 other components +1 for itself.

			IMPORTANT: Only project internal compilation units are considered.
		</description>
		<related-metric name="depends upon" />
		<related-metric name="number of components" />
	</metric>
	<metric name="cumulative component dependency (CCD)" value-type="number" index-type="descending">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			The cumulative component dependency (CCD) is the sum of all component dependencies.
			A component is
			equivalent to 'compilation unit'.
		</description>
		<related-metric name="depends upon" />
	</metric>
	<metric name="cumulative component dependency for balanced binary tree" value-type="number" index-type="descending">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			The cumulated component dependency of a dependency structure of a balanced binary tree
			based on the SIZE
			of the project. Used to compare the CCD's. 
		</description>
		<related-metric name="cumulative component dependency (CCD)" />
		<related-metric name="number of components" />
	</metric>
	<metric name="cumulative component dependency for cyclically dependent graph" value-type="number" index-type="none">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			The cumulated component dependency of a dependency structure where every element depends upon all others.
			If n is the number of elements the CCD is n*n. The worst case calculation based on the SIZE of the project.
			Used to compare the CCD's.
		</description>
		<related-metric name="cumulative component dependency (CCD)" />
		<related-metric name="number of components" />
	</metric>
	<metric name="normalized cumulative component dependency (NCCD)" value-type="number" index-type="none">
		<description>
			Described in 'Large-Scale C++ Software Design, John Lakos, Addison-Wesley 1996'.

			The normalized cumulative component dependency (NCCD) is the CCD divided by the
			CCD for a balanced binary
			tree like dependency structure.

			A value greater than 1 indicates a more vertical design.
			A value less than 1 indicates a more horizontal design. 
		</description>
		<related-metric name="cumulative component dependency (CCD)" />
		<related-metric name="cumulative component dependency for balanced binary tree" />
	</metric>

	<!-- Craig Larman -->
	<metric name="relational cohesion (RC)" value-type="number" index-type="ascending">
		<description>
			Described in 'Applying UML and Patterns, C. Larman, Addison-Wesley 2002'.

			RC = Number of internal type relations / number of types
		</description>
		<related-metric name="number of internal type relations" />
		<related-metric name="number of types (Nc)" />
	</metric>

	<!-- Robert C. Martin -->
	<metric name="efferent (outgoing) coupling (Ce)" value-type="number" index-type="descending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of types outside the container that types inside depend upon (i.e. outgoing dependencies).
		</description>
	</metric>
	<metric name="afferent (incoming) coupling (Ca)" value-type="number" index-type="descending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of types outside the container that depend upon types inside (i.e. incoming dependencies).
		</description>
	</metric>
	<metric name="afferent (incoming) coupling (Ca) - project external" value-type="number" index-type="descending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of types outside the container that depend upon types inside (i.e. incoming dependencies).
		</description>
	</metric>
	<metric name="number of types (Nc)" value-type="number" index-type="descending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of contained types (interfaces and classes).
		</description>
	</metric>
	<metric name="number of abstract types (Na)" value-type="number" index-type="ascending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of contained abstract types (interfaces and abstract classes).
		</description>
	</metric>
	<metric name="number of concrete types" value-type="number" index-type="descending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			Number of contained concrete types (concrete classes).
		</description>
	</metric>
	<metric name="abstractness (A)" value-type="number" index-type="none">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			A = Na/Nc
			The metric has a range of [0,1]. A value of zero means that the container contains no abstract
			types.
			A value of one means that the container contains nothing but abstract types.
		</description>
		<related-metric name="number of abstract types (Na)" />
		<related-metric name="number of types (Nc)" />
	</metric>
	<metric name="instability (I)" value-type="number" index-type="ascending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			I = Ce/(Ca+Ce)
			The metric has a range of [0,1]. If there are no outgoing dependencies, then I will be zero
			and the container is stable. If there are no incoming dependencies then I will be one and the
			container is instable.

			Stable means 'not so easy to change'.
			Instable means 'easier to change'.
		</description>
		<related-metric name="efferent (outgoing) coupling (Ce)" />
		<related-metric name="afferent (incoming) coupling (Ca)" />
	</metric>
	<metric name="distance (D)" value-type="number" index-type="ascending">
		<description>
			Described in 'Agile Software Development, Robert C. Martin, Prentice Hall 2003'.

			D = A + I - 1 (slightly modified! Robert C. Martin described uses this formula: D = |A + I - 1|).
			The
			metric has a range of [-1,1].
			Negative means 'zone of pain' and positive means 'zone of uselessness'.
		</description>
		<related-metric name="abstractness (A)" />
		<related-metric name="instability (I)" />
	</metric>

	<!-- project -->
	<metric name="max depth of type inheritance" value-type="number" index-type="none">
		<description>
			Longest path in the type inheritance tree considering all classes and interfaces - excluding 'java.lang.Object'.
		</description>
		<related-metric name="depth of class inheritance" />
		<related-metric name="depth of interface inheritance" />
	</metric>

	<metric name="max depth of package hierarchy" value-type="number" index-type="none">
		<description>
			Longest path in the physical package hierarchy considering all packages.
		</description>
		<related-metric name="depth of package hierarchy" />
	</metric>

	<!-- marker -->
	<metric name="extendable" value-type="text" index-type="index">
		<description>
			Marks extendable types - non final classes. 
		</description>
	</metric>
	<metric name="abstract" value-type="text" index-type="none">
		<description>
			Marks abstract types - interfaces and abstract classes. 
		</description>
	</metric>
	<metric name="interface" value-type="text" index-type="index">
		<description>
			Marks interfaces. 
		</description>
	</metric>
	<metric name="nested" value-type="text" index-type="index">
		<description>
			Marks nested types. 
		</description>
	</metric>
	<metric name="accessible" value-type="text" index-type="none">
		<description>
			Marks types that are accessible from other packages.  
		</description>
	</metric>
	<metric name="refactored" value-type="text" index-type="index">
		<description>
			Marks elements as refactored - if affected due to a refactoring definition.
		</description>
	</metric>
	<metric name="project internal" value-type="text" index-type="index">
		<description>
			Marks project internal elements.
		</description>
	</metric>
	<metric name="project external" value-type="text" index-type="index">
		<description>
			Marks project external elements.
		</description>
	</metric>

	<!-- type container metrics -->
	<metric name="number of internal type relations" value-type="number" index-type="ascending">
		<description>
			Number of internal type relations (uses, extends, implements) of the types in a specific
			type container (vertical slice , layer, subsystem, package). 
		</description>
	</metric>
	<metric name="number of external type relations" value-type="number" index-type="descending">
		<description>
			Number of external type relations of types in a specific container (layer, subsystem, ...).
			Uses, extends, implements to/from types not contained in the specific container.
		</description>
	</metric>
	<metric name="number of accessible types" value-type="number" index-type="descending">
		<description>
			Number of accessible types in a specific type container (vertical slice , layer, subsystem, package,
			compilation unit).  
		</description>
		<related-metric name="accessible" />
	</metric>

	<!-- compilation unit container metrics -->
	<metric name="number of assertions" value-type="number" index-type="ascending">
		<description>
			Number of recognized assertion statements in project internal classes - only classes may have method implementations.

			HINT: Assertions are only analyzed if source files are provided.
		</description>
	</metric>
	<metric name="average usage of assertions per class" value-type="number" index-type="ascending">
		<description>
			Average usage of assertions per project internal class - only classes my have method implementations. 
		</description>
		<related-metric name="number of assertions" />
	</metric>

	<!-- compilation unit metrics -->
	<metric name="number of package internal relations" value-type="number" index-type="ascending">
		<description>
			Number of package internal relations. 
		</description>
	</metric>
	<metric name="number of package external relations" value-type="number" index-type="descending">
		<description>
			Number of package external relations. 
		</description>
	</metric>
	<metric name="more package external than internal relations exist" value-type="number" index-type="index">
		<description>
			Marks a compilation unit if more package external than package internal relations exist.
			Does it belong to another package?  
		</description>
		<related-metric name="number of package internal relations" />
		<related-metric name="number of package external relations" />
	</metric>
	<metric name="the most external relations exist with package" value-type="number" index-type="none">
		<description>
			If a compilation unit has more package external than package internal relations,
			the package with the most relations is shown.
		</description>
		<related-metric name="more package external than internal relations exist" />
	</metric>
	<metric name="contains accessible types but no incoming outer package dependencies exist" value-type="number" index-type="index">
		<description>
			If a compilation unit has no incoming outer package dependencies, maybe it is possible to reduce the
			visibility of the contained types if there are not used via a reflection mechanism.
		</description>
	</metric>

	<!-- type metrics -->
	<metric name="number of children (NOC)" value-type="number" index-type="descending">
		<description>
			Number of direct subtypes of a specific type. 
		</description>
	</metric>
	<metric name="depth of class inheritance" value-type="number" index-type="descending">
		<description>
			Longest path in the inheritance tree for a specific class - excluding 'java.lang.Object'.   
		</description>
	</metric>
	<metric name="depth of interface inheritance" value-type="number" index-type="descending">
		<description>
			Longest path in the inheritance tree for a specific interface - excluding 'java.lang.Object'.   
		</description>
	</metric>

	<!-- general size metrics -->
	<metric name="number of contained subsystems" value-type="number" index-type="ascending">
		<description>
			Number of contained subsystems. 
		</description>
	</metric>
	<metric name="number of contained packages" value-type="number" index-type="ascending">
		<description>
			Number of contained packages. 
		</description>
	</metric>
	<metric name="depth of package hierarchy" value-type="number" index-type="descending">
		<description>
			Longest path in the physical package hierarchy.

			Example: The package 'de.valtech.dependometer.app.core.metrics' has a 'depth of package hierarchy' of 6.
		</description>
	</metric>

	<metric name="number of forbidden outgoing dependencies" value-type="number" index-type="descending">
		<description>
			Number of dependencies that violate the imposed dependencies from the logical architecture description. 
		</description>
	</metric>
	<metric name="number of incoming dependencies" value-type="number" index-type="descending">
		<description>
			Only incoming dependencies to project internal elements are considered.
		</description>
	</metric>
	<metric name="number of incoming dependencies - project external" value-type="number" index-type="descending">
		<description>
			Only incoming dependencies to project external elements are considered.
			Which project external elements have the highest coupling to project internal elements? 
		</description>
	</metric>
	<metric name="number of outgoing dependencies" value-type="number" index-type="descending">
		<description>
			Only outgoing dependencies to project internal elements are considered.
		</description>
	</metric>
	<metric name="number of outgoing dependencies to project external" value-type="number" index-type="descending">
		<description>
			Only outgoing dependencies to project external elements are considered.
			Which project internal elements have the highest coupling to project external elements? 
		</description>
	</metric>
	<metric name="no incoming dependencies detected" value-type="number" index-type="index">
		<description>
			No physical incoming dependencies detected.
			Is this element still in use? Maybe it is used via a reflection mechanism.
		</description>
	</metric>
	<metric name="no dependencies detected" value-type="number" index-type="index">
		<description>
			No physical incoming or outgoing dependencies detected.
			Is this element still in use? Maybe it is used via a reflection mechanism.
		</description>
	</metric>

	<!-- ############### -->
	<!-- project metrics -->
	<!-- ############### -->

	<!-- vertical slice related -->
	<metric name="number of outgoing vertical slice dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing vertical slice dependencies.
		</description>
	</metric>
	<metric name="number of project internal vertical slices" value-type="number" index-type="none">
		<description>
			Number of project internal vertical slices.
		</description>
	</metric>
	<metric name="cycles exist between project internal vertical slices" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal vertical slice cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="percentage of project internal vertical slices with a relational cohesion >= 1.0" value-type="number" index-type="none">
		<description>
			Percentage of vertical slices that have at least a relational cohesion of 1.0. 
		</description>
		<related-metric name="relational cohesion (RC)" />
	</metric>
	<metric name="number of forbidden outgoing vertical slice dependencies" value-type="text" index-type="none">
		<description>
			Total number of forbidden outgoing vertical slice dependencies.

			Total number of outgoing vertical slice dependencies that are not conform to the allowed outgoing dependencies of
			layers
			and subsystems. 
		</description>
	</metric>

	<!-- layer related -->
	<metric name="number of outgoing layer dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing layer dependencies.
		</description>
	</metric>
	<metric name="number of forbidden outgoing layer dependencies" value-type="text" index-type="none">
		<description>
			Total number of forbidden outgoing layer dependencies.

			Total number of outgoing layer dependencies that are not conform to the allowed outgoing dependencies of
			layers. 
		</description>
	</metric>
	<metric name="number of project external layers" value-type="text" index-type="none">
		<description>
			Number of project external layers.
		</description>
	</metric>
	<metric name="number of project internal layers" value-type="text" index-type="none">
		<description>
			Number of project internal layers.
		</description>
	</metric>
	<metric name="number of allowed outgoing layer dependencies" value-type="text" index-type="none">
		<description>
			Number of outgoing layer dependencies.
		</description>
	</metric>
	<metric name="cycles exist between project internal layers" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal layer cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="percentage of project internal layers with a relational cohesion >= 1.0" value-type="number" index-type="none">
		<description>
			Percentage of layers that have at least a relational cohesion of 1.0. 
		</description>
		<related-metric name="relational cohesion (RC)" />
	</metric>

	<!-- subsystem related -->
	<metric name="number of outgoing subsystem dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing subsystem dependencies.
		</description>
	</metric>
	<metric name="number of forbidden outgoing subsystem dependencies" value-type="number" index-type="none">
		<description>
			Total number of forbidden outgoing subsystem dependencies.

			Total number of outgoing subsystem dependencies that are not conform to the allowed outgoing dependencies of
			layers and
			subsystems. 
		</description>
	</metric>
	<metric name="number of project external subsystems" value-type="number" index-type="none">
		<description>
			Number of project external subsystems.
		</description>
	</metric>
	<metric name="number of project internal subsystems" value-type="number" index-type="none">
		<description>
			Number of project internal subsystems.
		</description>
	</metric>
	<metric name="number of allowed outgoing subsystem dependencies" value-type="number" index-type="none">
		<description>
			Number of outgoing subsystem dependencies.
		</description>
	</metric>
	<metric name="number of not implemented subsystems" value-type="number" index-type="none">
		<description>
			Total number of not implemented subsystems (i.e. without assigned packages) - project internal and external.
		</description>
	</metric>
	<metric name="cycles exist between project internal subsystems" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal subsystem cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="percentage of project internal subsystems with a relational cohesion >= 1.0" value-type="number" index-type="none">
		<description>
			Percentage of subsystems that have at least a relational cohesion of 1.0. 
		</description>
		<related-metric name="relational cohesion (RC)" />
	</metric>

	<!-- package related -->
	<metric name="cycles exist between project internal packages" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal package cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="number of project internal packages" value-type="number" index-type="none">
		<description>
			Number of project internal packages.
		</description>
	</metric>
	<metric name="number of project external packages" value-type="number" index-type="none">
		<description>
			Number of project external packages.
		</description>
	</metric>
	<metric name="number of outgoing package dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing package dependencies - project internal and external.
		</description>
	</metric>
	<metric name="number of forbidden outgoing package dependencies" value-type="number" index-type="none">
		<description>
			Total number of forbidden outgoing package dependencies.

			Total number of outgoing package dependencies that are not conform to the allowed outgoing dependencies of
			layers, subsystems and
			packages. 
		</description>
	</metric>
	<metric name="percentage of project internal packages with a relational cohesion >= 1.0" value-type="number" index-type="none">
		<description>
			Percentage of packages that have at least a relational cohesion of 1.0. 
		</description>
		<related-metric name="relational cohesion (RC)" />
	</metric>

	<!-- compilation unit related -->
	<metric name="number of outgoing compilation unit dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing compilation unit dependencies.
		</description>
	</metric>
	<metric name="number of forbidden outgoing compilation unit dependencies" value-type="number" index-type="none">
		<description>
			Total number of forbidden outgoing compilation unit dependencies.

			Total number of outgoing compilation unit dependencies that are not conform to the allowed outgoing dependencies of
			layers, subsystems and packages. 
		</description>
	</metric>
	<metric name="cycles exist between project internal compilation units" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal compilation unit cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="number of project internal compilation units" value-type="number" index-type="descending">
		<description>
			Number of project internal compilation units.
		</description>
	</metric>
	<metric name="number of project external compilation units" value-type="number" index-type="none">
		<description>
			Number of project external compilation units.
		</description>
	</metric>

	<!-- type related -->
	<metric name="number of outgoing type dependencies" value-type="number" index-type="none">
		<description>
			Total number of outgoing type dependencies.
		</description>
	</metric>
	<metric name="number of project internal types" value-type="number" index-type="descending">
		<description>
			Number of project internal types.
		</description>
	</metric>
	<metric name="number of project external types" value-type="number" index-type="none">
		<description>
			Number of project external types.
		</description>
	</metric>
	<metric name="cycles exist between project internal types" value-type="text" index-type="none">
		<description>
			Indicates that at least one project internal type cycle exists if set to 'true'.
		</description>
	</metric>
	<metric name="number of forbidden outgoing type dependencies" value-type="number" index-type="none">
		<description>
			Total number of forbidden outgoing type dependencies.

			Total number of outgoing type dependencies that are not conform to the allowed outgoing dependencies of
			layers, subsystems and
			packages. 
		</description>
	</metric>

	<metric name="number of allowed outgoing package dependencies" value-type="number" index-type="none">
		<description>
			Total number of allowed outgoing package dependencies.
		</description>
	</metric>
	<metric name="number of not assigned packages" value-type="number" index-type="none">
		<description>
			Number of packages not assigned to a subsystem.
		</description>
	</metric>

	<metric name="number of type cycles" value-type="number" index-type="none">
		<description>
			Number of type cycles.
		</description>
	</metric>

	<metric name="number of compilation unit cycles" value-type="number" index-type="none">
		<description>
			Number of compilation unit cycles.
		</description>
	</metric>

	<metric name="number of package cycles" value-type="number" index-type="none">
		<description>
			Number of package cycles.
		</description>
	</metric>

	<metric name="number of subsystem cycles" value-type="number" index-type="none">
		<description>
			Number of subsystem cycles.
		</description>
	</metric>

	<metric name="number of vertical slice cycles" value-type="number" index-type="none">
		<description>
			Number of vertical slices cycles.
		</description>
	</metric>

	<metric name="number of layer cycles" value-type="number" index-type="none">
		<description>
			Number of layer cycles.
		</description>
	</metric>
	
	<metric name="number of type tangles" value-type="number" index-type="none">
		<description>
			Number of type tangles.
		</description>
	</metric>

	<metric name="number of compilation unit tangles" value-type="number" index-type="none">
		<description>
			Number of compilation unit tangles.
		</description>
	</metric>

	<metric name="number of package tangles" value-type="number" index-type="none">
		<description>
			Number of package tangles.
		</description>
	</metric>

	<metric name="number of subsystem tangles" value-type="number" index-type="none">
		<description>
			Number of subsystem tangles.
		</description>
	</metric>

	<metric name="number of vertical slice tangles" value-type="number" index-type="none">
		<description>
			Number of vertical slices tangles.
		</description>
	</metric>

	<metric name="number of layer tangles" value-type="number" index-type="none">
		<description>
			Number of layer tangles.
		</description>
	</metric>


</metrics>
